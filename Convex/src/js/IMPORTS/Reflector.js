THREE.Reflector=function(e,t){THREE.Mesh.call(this,e),this.type="Reflector";var r=this,a=void 0!==(t=t||{}).color?new THREE.Color(t.color):new THREE.Color(8355711),o=t.textureWidth||512,i=t.textureHeight||512,n=t.clipBias||0,l=t.shader||THREE.Reflector.ReflectorShader,s=void 0!==t.recursion?t.recursion:0,c=new THREE.Plane,d=new THREE.Vector3,u=new THREE.Vector3,E=new THREE.Vector3,v=new THREE.Matrix4,m=new THREE.Vector3(0,0,-1),f=new THREE.Vector4,p=new THREE.Vector4,R=new THREE.Vector3,x=new THREE.Vector3,T=new THREE.Vector4,b=new THREE.Matrix4,h=new THREE.PerspectiveCamera,w={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1},H=new THREE.WebGLRenderTarget(o,i,w);THREE.Math.isPowerOfTwo(o)&&THREE.Math.isPowerOfTwo(i)||(H.texture.generateMipmaps=!1);var y=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(l.uniforms),fragmentShader:l.fragmentShader,vertexShader:l.vertexShader});y.uniforms.tDiffuse.value=H.texture,y.uniforms.color.value=a,y.uniforms.textureMatrix.value=b,this.material=y,this.renderOrder=-1/0,this.onBeforeRender=function(e,t,a){if("recursion"in a.userData){if(a.userData.recursion===s)return;a.userData.recursion++}if(u.setFromMatrixPosition(r.matrixWorld),E.setFromMatrixPosition(a.matrixWorld),v.extractRotation(r.matrixWorld),d.set(0,0,1),d.applyMatrix4(v),R.subVectors(u,E),!(R.dot(d)>0)){R.reflect(d).negate(),R.add(u),v.extractRotation(a.matrixWorld),m.set(0,0,-1),m.applyMatrix4(v),m.add(E),x.subVectors(u,m),x.reflect(d).negate(),x.add(u),h.position.copy(R),h.up.set(0,1,0),h.up.applyMatrix4(v),h.up.reflect(d),h.lookAt(x),h.far=a.far,h.updateMatrixWorld(),h.projectionMatrix.copy(a.projectionMatrix),h.userData.recursion=0,b.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),b.multiply(h.projectionMatrix),b.multiply(h.matrixWorldInverse),b.multiply(r.matrixWorld),c.setFromNormalAndCoplanarPoint(d,u),c.applyMatrix4(h.matrixWorldInverse),f.set(c.normal.x,c.normal.y,c.normal.z,c.constant);var o=h.projectionMatrix;T.x=(Math.sign(f.x)+o.elements[8])/o.elements[0],T.y=(Math.sign(f.y)+o.elements[9])/o.elements[5],T.z=-1,T.w=(1+o.elements[10])/o.elements[14],f.multiplyScalar(2/f.dot(T)),o.elements[2]=f.x,o.elements[6]=f.y,o.elements[10]=f.z+1-n,o.elements[14]=f.w,r.visible=!1;var i=e.getRenderTarget(),l=e.vr.enabled,w=e.shadowMap.autoUpdate;e.vr.enabled=!1,e.shadowMap.autoUpdate=!1,e.render(t,h,H,!0),e.vr.enabled=l,e.shadowMap.autoUpdate=w,e.setRenderTarget(i);var y=a.bounds;if(void 0!==y){var M=e.getSize(),g=e.getPixelRatio();p.x=y.x*M.width*g,p.y=y.y*M.height*g,p.z=y.z*M.width*g,p.w=y.w*M.height*g,e.state.viewport(p)}r.visible=!0}},this.getRenderTarget=function(){return H}},THREE.Reflector.prototype=Object.create(THREE.Mesh.prototype),THREE.Reflector.prototype.constructor=THREE.Reflector,THREE.Reflector.ReflectorShader={uniforms:{color:{type:"c",value:null},tDiffuse:{type:"t",value:null},textureMatrix:{type:"m4",value:null}},vertexShader:["uniform mat4 textureMatrix;","varying vec4 vUv;","void main() {","\tvUv = textureMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform vec3 color;","uniform sampler2D tDiffuse;","varying vec4 vUv;","float blendOverlay( float base, float blend ) {","\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );","}","vec3 blendOverlay( vec3 base, vec3 blend ) {","\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );","}","void main() {","\tvec4 base = texture2DProj( tDiffuse, vUv );","\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );","}"].join("\n")};