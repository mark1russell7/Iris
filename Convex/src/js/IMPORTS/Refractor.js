THREE.Refractor=function(e,r){THREE.Mesh.call(this,e),this.type="Refractor";var t=this,a=void 0!==(r=r||{}).color?new THREE.Color(r.color):new THREE.Color(8355711),o=r.textureWidth||512,n=r.textureHeight||512,i=r.clipBias||0,l=r.shader||THREE.Refractor.RefractorShader,s=new THREE.PerspectiveCamera;s.matrixAutoUpdate=!1,s.userData.refractor=!0;var c=new THREE.Plane,E=new THREE.Matrix4,m={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1},d=new THREE.WebGLRenderTarget(o,n,m);THREE.Math.isPowerOfTwo(o)&&THREE.Math.isPowerOfTwo(n)||(d.texture.generateMipmaps=!1),this.material=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader,transparent:!0}),this.material.uniforms.color.value=a,this.material.uniforms.tDiffuse.value=d.texture,this.material.uniforms.textureMatrix.value=E;var u,v,f,R,x,p,T,h,b=(u=new THREE.Vector3,v=new THREE.Vector3,f=new THREE.Matrix4,R=new THREE.Vector3,x=new THREE.Vector3,function(e){return u.setFromMatrixPosition(t.matrixWorld),v.setFromMatrixPosition(e.matrixWorld),R.subVectors(u,v),f.extractRotation(t.matrixWorld),x.set(0,0,1),x.applyMatrix4(f),R.dot(x)<0}),w=function(){var e=new THREE.Vector3,r=new THREE.Vector3,a=new THREE.Quaternion,o=new THREE.Vector3;return function(){t.matrixWorld.decompose(r,a,o),e.set(0,0,1).applyQuaternion(a).normalize(),e.negate(),c.setFromNormalAndCoplanarPoint(e,r)}}(),H=(p=new THREE.Plane,T=new THREE.Vector4,h=new THREE.Vector4,function(e){s.matrixWorld.copy(e.matrixWorld),s.matrixWorldInverse.getInverse(s.matrixWorld),s.projectionMatrix.copy(e.projectionMatrix),s.far=e.far,p.copy(c),p.applyMatrix4(s.matrixWorldInverse),T.set(p.normal.x,p.normal.y,p.normal.z,p.constant);var r=s.projectionMatrix;h.x=(Math.sign(T.x)+r.elements[8])/r.elements[0],h.y=(Math.sign(T.y)+r.elements[9])/r.elements[5],h.z=-1,h.w=(1+r.elements[10])/r.elements[14],T.multiplyScalar(2/T.dot(h)),r.elements[2]=T.x,r.elements[6]=T.y,r.elements[10]=T.z+1-i,r.elements[14]=T.w});var y,g=(y=new THREE.Vector4,function(e,r,a){t.visible=!1;var o=e.getRenderTarget(),n=e.vr.enabled,i=e.shadowMap.autoUpdate;e.vr.enabled=!1,e.shadowMap.autoUpdate=!1,e.render(r,s,d,!0),e.vr.enabled=n,e.shadowMap.autoUpdate=i,e.setRenderTarget(o);var l=a.bounds;if(void 0!==l){var c=e.getSize(),E=e.getPixelRatio();y.x=l.x*c.width*E,y.y=l.y*c.height*E,y.z=l.z*c.width*E,y.w=l.w*c.height*E,e.state.viewport(y)}t.visible=!0});this.onBeforeRender=function(e,r,a){!0!==a.userData.refractor&&!0!=!b(a)&&(w(),function(e){E.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),E.multiply(e.projectionMatrix),E.multiply(e.matrixWorldInverse),E.multiply(t.matrixWorld)}(a),H(a),g(e,r,a))},this.getRenderTarget=function(){return d}},THREE.Refractor.prototype=Object.create(THREE.Mesh.prototype),THREE.Refractor.prototype.constructor=THREE.Refractor,THREE.Refractor.RefractorShader={uniforms:{color:{type:"c",value:null},tDiffuse:{type:"t",value:null},textureMatrix:{type:"m4",value:null}},vertexShader:["uniform mat4 textureMatrix;","varying vec4 vUv;","void main() {","\tvUv = textureMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform vec3 color;","uniform sampler2D tDiffuse;","varying vec4 vUv;","float blendOverlay( float base, float blend ) {","\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );","}","vec3 blendOverlay( vec3 base, vec3 blend ) {","\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );","}","void main() {","\tvec4 base = texture2DProj( tDiffuse, vUv );","\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );","}"].join("\n")};